*  软中断 - tasklet - 工作队列
   运用与中断上下文的下文，精简中断处理 ...
   区别：
     软中断 - tasklet ===>
	 软中断内部实现了自旋锁，保护内部数据，允许同时运行在多个CPU上；
	 tasklet 为实现数据保护工作，不过内核对tasklet的调度进行了严格控制。
	 工作队列和上述的区别在于，上面两个运行在中断上下文,即不允许有睡眠,工作队列运行进程上下文。

*  input 输入子系统

 ______________________________________________________________________
|         input_dev (usbmouse usbkeyboard psmouse... ) 设备群          |
|	     |- 支持的事件 x -|- 支持的事件 y -|- 支持的事件 z -|          |
|                                                                      |
|   -------------------------------------------------------------      |
|                                                                      |
|                     input_handle                                     |
|                                                                      |
|   --------------------------------------------------------------     |
|         input_handler (keboard mouse joytick) 一类设备               |
|	     |- 支持的事件 x -|- 支持的事件 y -|- 支持的事件 z -|          |
|______________________________________________________________________|

 ___________________________________________________________________________________
|                                                                                   |
|		          ^----------------------^                                          |
|		          | input_handler(mouse) | --- xxx.event() <---------------^        |
|				  ^----------------------^                                 |        |
|				  //         ||        \\  <-------------------------------|----^   |
|		^-----------^ 	^-----------^ 	^---------^                        |    |   |
|        | usbmouse0 |   | usbmouse1 |   | psmouse | ----> input_event() ---    |   |
|        ^-----------^   ^-----------^   ^---------^                            |   |
|根据每个设备支持的事件，通过 input_handle 使设备dev与设备类handler建立连接 ----    |
|___________________________________________________________________________________|

*  spin_lock  是禁止抢占的。也就是说里面不应该有睡眠。假如睡眠了，此时被调度的进程运行
   未释放的spin_lock导致死锁，无法进行调度。
   -  单处理器非抢占内核下：自旋锁会在编译时被忽略；
   -  单处理器抢占内核下：自旋锁仅仅当作一个设置内核抢占的开关；
   -  多处理器下：此时才能完全发挥出自旋锁的作用，自旋锁在内核中主要用来防止多处理器中并发访问临界区，防止内核抢占造成的竞争。

